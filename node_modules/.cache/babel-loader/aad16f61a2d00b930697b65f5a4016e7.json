{"ast":null,"code":"var _jsxFileName = \"/Users/nickc/SpringBoard/react/exercies/react-card-effects/src/Deck.js\";\n\n/* springboard credit */\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\nconst API_BASE_URL = \"http://deckofcardsapi.com/api/deck\";\n/* Deck: uses deck API, allows drawing card at a time. */\n\nfunction Deck() {\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n  const [autoDraw, setAutoDraw] = useState(false);\n  const timerRef = useRef(null);\n  /* At mount: load deck from API into state. */\n\n  useEffect(() => {\n    async function getData() {\n      let d = await axios.get(\"\".concat(API_BASE_URL, \"/new/shuffle/\"));\n      setDeck(d.data);\n    }\n\n    getData();\n  }, [setDeck]);\n  /* Draw one card every second if autoDraw is true */\n\n  useEffect(() => {\n    /* Draw a card via API, add card to state \"drawn\" list */\n    async function getCard() {\n      let {\n        deck_id\n      } = deck;\n\n      try {\n        let drawRes = await axios.get(\"\".concat(API_BASE_URL, \"/\").concat(deck_id, \"/draw/\"));\n\n        if (drawRes.data.remaining === 0) {\n          setAutoDraw(false);\n          throw new Error(\"no cards remaining!\");\n        }\n\n        const card = drawRes.data.cards[0];\n        setDrawn(d => [...d, {\n          id: card.code,\n          name: card.suit + \" \" + card.value,\n          image: card.image\n        }]);\n      } catch (err) {\n        alert(err);\n      }\n    }\n\n    if (autoDraw && !timerRef.current) {\n      timerRef.current = setInterval(async () => {\n        await getCard();\n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    };\n  }, [autoDraw, setAutoDraw, deck]);\n\n  const toggleAutoDraw = () => {\n    setAutoDraw(auto => !auto);\n  };\n\n  const cards = drawn.map(c => /*#__PURE__*/React.createElement(Card, {\n    key: c.id,\n    name: c.name,\n    image: c.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Deck\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, deck ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"Deck-gimme\",\n    onClick: toggleAutoDraw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, autoDraw ? \"STOP\" : \"KEEP\", \" DRAWING FOR ME!\") : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Deck-cardarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, cards));\n}\n\nexport default Deck;","map":{"version":3,"sources":["/Users/nickc/SpringBoard/react/exercies/react-card-effects/src/Deck.js"],"names":["React","useEffect","useState","useRef","Card","axios","API_BASE_URL","Deck","deck","setDeck","drawn","setDrawn","autoDraw","setAutoDraw","timerRef","getData","d","get","data","getCard","deck_id","drawRes","remaining","Error","card","cards","id","code","name","suit","value","image","err","alert","current","setInterval","clearInterval","toggleAutoDraw","auto","map","c"],"mappings":"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","sourcesContent":["/* springboard credit */\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\n\nconst API_BASE_URL = \"http://deckofcardsapi.com/api/deck\";\n\n/* Deck: uses deck API, allows drawing card at a time. */\n\nfunction Deck() {\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n  const [autoDraw, setAutoDraw] = useState(false);\n  const timerRef = useRef(null);\n\n  /* At mount: load deck from API into state. */\n  useEffect(() => {\n    async function getData() {\n      let d = await axios.get(`${API_BASE_URL}/new/shuffle/`);\n      setDeck(d.data);\n    }\n    getData();\n  }, [setDeck]);\n\n  /* Draw one card every second if autoDraw is true */\n  useEffect(() => {\n    /* Draw a card via API, add card to state \"drawn\" list */\n    async function getCard() {\n      let { deck_id } = deck;\n\n      try {\n        let drawRes = await axios.get(`${API_BASE_URL}/${deck_id}/draw/`);\n        if (drawRes.data.remaining === 0) {\n          setAutoDraw(false);\n          throw new Error(\"no cards remaining!\");\n        }\n\n        const card = drawRes.data.cards[0];\n\n        setDrawn((d) => [\n          ...d,\n          {\n            id: card.code,\n            name: card.suit + \" \" + card.value,\n            image: card.image,\n          },\n        ]);\n      } catch (err) {\n        alert(err);\n      }\n    }\n\n    if (autoDraw && !timerRef.current) {\n      timerRef.current = setInterval(async () => {\n        await getCard();\n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    };\n  }, [autoDraw, setAutoDraw, deck]);\n\n  const toggleAutoDraw = () => {\n    setAutoDraw((auto) => !auto);\n  };\n\n  const cards = drawn.map((c) => (\n    <Card key={c.id} name={c.name} image={c.image} />\n  ));\n\n  return (\n    <div className=\"Deck\">\n      {deck ? (\n        <button className=\"Deck-gimme\" onClick={toggleAutoDraw}>\n          {autoDraw ? \"STOP\" : \"KEEP\"} DRAWING FOR ME!\n        </button>\n      ) : null}\n      <div className=\"Deck-cardarea\">{cards}</div>\n    </div>\n  );\n}\n\nexport default Deck;\n"]},"metadata":{},"sourceType":"module"}